{"ast":null,"code":"var _jsxFileName = \"/Users/izzah/Documents/Programming/hangman_project/client/src/components/Singleplayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Stopwatch from \"./Stopwatch\";\nimport SubmitScore from \"./SubmitScore\";\nimport Modal from \"./modal/Modal\";\nimport ModalHeader from \"./modal/ModalHeader\";\nimport ModalTitle from \"./modal/ModalTitle\";\nimport ModalBody from \"./modal/ModalBody\";\nimport ModalFooter from \"./modal/ModalFooter\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Singleplayer = () => {\n  _s();\n\n  const alphabets = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [showSubmit, setShowSubmit] = useState(false);\n  const [start, setStart] = useState(false);\n  const [time, setTime] = useState(0);\n  const [word, setWord] = useState(\"\");\n  const [correct, setCorrect] = useState([]);\n  const [guessed, setGuessed] = useState([]);\n  const [lives, setLives] = useState(6); // 6 lives\n\n  const [status, setStatus] = useState(\"Ongoing\");\n  const hiddenWord = word.toUpperCase().split(\"\").map(letter => correct.includes(letter) ? letter : \"_\").join(\" \");\n  let guesses = guessed.join(\" \");\n  const MAX_SCORE = 24000;\n  const MAX_BONUS = 60000;\n  const bonus = time > 60000 || status === \"L\" ? 0 : MAX_BONUS - time;\n  const endMessage = status === \"W\" ? \"You won!\" : \"You lost!\";\n\n  const showModal = () => {\n    setIsOpenModal(true);\n  };\n\n  const hideModal = () => {\n    setIsOpenModal(false);\n  };\n\n  const checkWin = () => {\n    if (!hiddenWord.includes(\"_\") && lives > 0) {\n      setStatus(\"W\");\n      endGame();\n    } else if (hiddenWord.includes(\"_\") && lives === 0) {\n      setStatus(\"L\");\n      endGame();\n    }\n  };\n\n  const countPoints = () => {\n    if (status === \"W\" && lives > 0) {\n      return lives / 6 * MAX_SCORE + bonus;\n    } else {\n      return 0;\n    }\n  };\n\n  const endGame = () => {\n    setStart(false);\n    showModal();\n  };\n\n  const randomIntFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const getWord = () => {\n    fetch(`https://www.wordgamedb.com/api/v1/words/?numLetters=${randomIntFromInterval(3, 7)}`).then(res => {\n      if (!res.ok) {\n        throw new Error(\"Could not fetch word data.\");\n      }\n\n      return res.json();\n    }).then(data => {\n      setWord(data[Math.floor(Math.random() * data.length)].word.toUpperCase());\n    }).then(() => console.log(\"Ok\")).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    getWord();\n  }, []);\n  useEffect(() => {\n    if (lives >= 0 && lives < 6 && status === \"Ongoing\") {\n      checkWin();\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-1 center col-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Singleplayer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stopwatch, {\n        start: start,\n        time: time,\n        setTime: setTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"hidden-word\",\n        children: hiddenWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-container\",\n        children: alphabets.map((a, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"letter-btn\",\n          disabled: guessed.includes(a),\n          onClick: () => {\n            if (!start) {\n              setStart(true);\n            }\n\n            if (word.includes(a) && !guesses.includes(a)) {\n              setCorrect([...correct, a]);\n              setGuessed([...guessed, a]);\n              checkWin();\n            } else if (!guesses.includes(a)) {\n              setLives(lives - 1);\n              setGuessed([...guessed, a]);\n              checkWin();\n            }\n          },\n          children: a\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 36\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Letters used:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: guesses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Lives left: \", lives < 0 ? 0 : lives]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-1\",\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        show: isOpenModal,\n        onClose: hideModal,\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          children: /*#__PURE__*/_jsxDEV(ModalTitle, {\n            children: endMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Bonus points: \", bonus]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Total Score: \", countPoints()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"The word is: \", word]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            onClick: () => setShowSubmit(true),\n            children: \"Submit Score\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              children: \"Play Again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 26\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SubmitScore, {\n            show: showSubmit,\n            onClose: () => setShowSubmit(false),\n            score: countPoints()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Singleplayer, \"mIAPkT/87QdaJBBwOeNeN7LfSJU=\");\n\n_c = Singleplayer;\nexport default Singleplayer; // General game logic to implement\n// 6 lives --> player gets more points if they with fewer incorrect guesses/more lives left\n// run a stopwatch --> the faster the time taken to win, the more points they get\n// max score from lives alone = 24000\n// add bonus points based on time taken --> max bonus points = 60000\n// if take more than 1 min, no bonus points\n// time-based bonus points --> decrease by 1 for every millisecond taken to complete game\n// display no. of lives left\n// display letters used\n// only allow letters as guesses\n// update gallows & lives every time an incorrect guess is made\n// ensure user cannot continue playing when lives === 0 or if user wins\n// submit username & score to database upon completion of game\n// reveal word at end of game regardless of outcome\n\nvar _c;\n\n$RefreshReg$(_c, \"Singleplayer\");","map":{"version":3,"names":["React","useState","useEffect","Stopwatch","SubmitScore","Modal","ModalHeader","ModalTitle","ModalBody","ModalFooter","Link","Singleplayer","alphabets","isOpenModal","setIsOpenModal","showSubmit","setShowSubmit","start","setStart","time","setTime","word","setWord","correct","setCorrect","guessed","setGuessed","lives","setLives","status","setStatus","hiddenWord","toUpperCase","split","map","letter","includes","join","guesses","MAX_SCORE","MAX_BONUS","bonus","endMessage","showModal","hideModal","checkWin","endGame","countPoints","randomIntFromInterval","min","max","Math","floor","random","getWord","fetch","then","res","ok","Error","json","data","length","console","log","catch","err","a","i"],"sources":["/Users/izzah/Documents/Programming/hangman_project/client/src/components/Singleplayer.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Stopwatch from \"./Stopwatch\";\nimport SubmitScore from \"./SubmitScore\";\nimport Modal from \"./modal/Modal\"\nimport ModalHeader from \"./modal/ModalHeader\"\nimport ModalTitle from \"./modal/ModalTitle\"\nimport ModalBody from \"./modal/ModalBody\";\nimport ModalFooter from \"./modal/ModalFooter\";\nimport { Link } from \"react-router-dom\";\n\nconst Singleplayer = () => {\n  const alphabets = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\",\n    \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\",\n    \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n\n  const [isOpenModal, setIsOpenModal] = useState(false)\n  const [showSubmit, setShowSubmit] = useState(false)\n  const [start, setStart] = useState(false)\n  const [time, setTime] = useState(0)\n  const [word, setWord] = useState(\"\")\n  const [correct, setCorrect] = useState([])\n  const [guessed, setGuessed] = useState([])\n  const [lives, setLives] = useState(6) // 6 lives\n  const [status, setStatus] = useState(\"Ongoing\")\n  const hiddenWord = word.toUpperCase().split(\"\").map(letter => correct.includes(letter) ? letter : \"_\").join(\" \")\n  let guesses = guessed.join(\" \")\n  const MAX_SCORE = 24000\n  const MAX_BONUS = 60000\n  const bonus = (time > 60000 || status === \"L\") ? 0 : MAX_BONUS - time\n  const endMessage = status === \"W\" ? \"You won!\" : \"You lost!\"\n\n  const showModal = () => {\n    setIsOpenModal(true)\n  }\n\n  const hideModal = () => {\n    setIsOpenModal(false)\n  }\n\n  const checkWin = () => {\n    if (!hiddenWord.includes(\"_\") && lives > 0) {\n      setStatus(\"W\")\n      endGame()\n    } else if (hiddenWord.includes(\"_\") && lives === 0) {\n      setStatus(\"L\")\n      endGame()\n    }\n  }\n\n  const countPoints = () => {\n    if (status === \"W\" && lives > 0) {\n      return (lives / 6) * MAX_SCORE + bonus\n    } else {\n      return 0\n    }\n  }\n\n  const endGame = () => {\n    setStart(false)\n    showModal()\n  }\n\n  const randomIntFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  const getWord = () => {\n    fetch(`https://www.wordgamedb.com/api/v1/words/?numLetters=${randomIntFromInterval(3, 7)}`)\n      .then(res => {\n        if (!res.ok) {\n          throw new Error(\"Could not fetch word data.\")\n        }\n        return res.json()\n      })\n      .then(data => {\n        setWord(data[Math.floor(Math.random() * data.length)].word.toUpperCase())\n      })\n      .then(() => console.log(\"Ok\"))\n      .catch(err => console.log(err))\n  }\n\n  useEffect(() => {\n    getWord()\n  }, [])\n\n  useEffect(() => {\n    if ((lives >= 0 && lives < 6) && status === \"Ongoing\") {\n      checkWin()\n    }\n  })\n\n  return (\n    <>\n      <div className=\"container-1 center col-12\">\n        <h1>Singleplayer</h1>\n        <Stopwatch start={start} time={time} setTime={setTime}/>\n        <h2 className=\"hidden-word\">{hiddenWord}</h2>\n        <div className=\"flex-container\">\n          {alphabets.map((a, i) => <button className=\"letter-btn\" key={i} disabled={guessed.includes(a)} onClick={() => {\n            if (!start) {\n              setStart(true)\n            }\n            if (word.includes(a) && !guesses.includes(a)) {\n              setCorrect([...correct, a])\n              setGuessed([...guessed, a])\n              checkWin()\n            } else if (!guesses.includes(a)) {\n              setLives(lives - 1)\n              setGuessed([...guessed, a])\n              checkWin()\n            }\n          }}>{a}</button>)}\n        </div>\n        <h3>Letters used:</h3>\n        <h3>{guesses}</h3>\n        <h3>Lives left: {lives < 0 ? 0 : lives}</h3>\n      </div>\n      <div className=\"container-1\">\n        <Modal show={isOpenModal} onClose={hideModal}>\n          <ModalHeader>\n            <ModalTitle>{endMessage}</ModalTitle>\n          </ModalHeader>\n          <ModalBody>\n            <p>Bonus points: {bonus}</p>\n            <p>Total Score: {countPoints()}</p>\n            <p>The word is: {word}</p>\n          </ModalBody>\n          <ModalFooter>\n            <button className=\"btn\" onClick={() => setShowSubmit(true)}>Submit Score</button>\n            <Link to=\"/\"><button className=\"btn\">Play Again</button></Link>\n              <SubmitScore\n                show={showSubmit}\n                onClose={() => setShowSubmit(false)}\n                score={countPoints()}\n              />\n          </ModalFooter>\n        </Modal>\n      </div>\n    </>\n  )\n}\n\nexport default Singleplayer\n\n// General game logic to implement\n// 6 lives --> player gets more points if they with fewer incorrect guesses/more lives left\n// run a stopwatch --> the faster the time taken to win, the more points they get\n// max score from lives alone = 24000\n// add bonus points based on time taken --> max bonus points = 60000\n// if take more than 1 min, no bonus points\n// time-based bonus points --> decrease by 1 for every millisecond taken to complete game\n// display no. of lives left\n// display letters used\n// only allow letters as guesses\n// update gallows & lives every time an incorrect guess is made\n// ensure user cannot continue playing when lives === 0 or if user wins\n// submit username & score to database upon completion of game\n// reveal word at end of game regardless of outcome"],"mappings":"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"},"metadata":{},"sourceType":"module"}