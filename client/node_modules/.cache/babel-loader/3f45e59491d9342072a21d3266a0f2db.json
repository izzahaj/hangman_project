{"ast":null,"code":"var _jsxFileName = \"/Users/izzah/Documents/Programming/hangman_project/client/src/components/Singleplayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Singleplayer = () => {\n  _s();\n\n  const alphabets = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n  const [word, setWord] = useState(\"\");\n  const [correct, setCorrect] = useState([]);\n  const [guessed, setGuessed] = useState([]);\n  const [lives, setLives] = useState(6); // 6 lives\n\n  const [message, setMessage] = useState(lives + \"lives left\");\n  const [points, setPoints] = useState(0);\n  const [status, setStatus] = useState(\"Ongoing\");\n  const hiddenWord = word.toUpperCase().split(\"\").map(letter => correct.includes(letter) ? letter : \"_\").join(\" \");\n  let guesses = guessed.join(\" \");\n  const MAX_SCORE = 2400;\n\n  const checkWin = () => {\n    if (!hiddenWord.includes(\"_\") && lives > 0) {\n      setMessage(\"You win!\");\n      setStatus(\"W\");\n      countPoints();\n    } else if (hiddenWord.includes(\"_\") && lives <= 0) {\n      setMessage(\"You Lose!\");\n      setStatus(\"L\");\n      countPoints();\n    } else {\n      setMessage(lives + \" lives left\");\n      setStatus(\"Ongoing\");\n    }\n\n    return message;\n  };\n\n  const countPoints = () => {\n    if (status === \"W\" && lives > 0) {\n      setPoints(lives / 6 * MAX_SCORE);\n    }\n  };\n\n  const endGame = () => {\n    if (status === \"W\") {\n      alert(\"You win\"); // replace with modal and submit score to database\n    } else if (status === \"L\") {\n      alert(\"You lose\"); // replace with modal and submit score to database\n    }\n  };\n\n  const randomIntFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const getWord = () => {\n    fetch(`https://www.wordgamedb.com/api/v1/words/?numLetters=${randomIntFromInterval(3, 7)}`).then(res => res.json()).then(data => {\n      setWord(data[Math.floor(Math.random() * data.length)].word.toUpperCase());\n    });\n  };\n\n  useEffect(() => {\n    getWord();\n  }, []);\n  useEffect(() => {\n    checkWin();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Singleplayer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: hiddenWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), alphabets.map((a, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (word.includes(a) && !guesses.includes(a)) {\n          setCorrect([...correct, a]);\n          setGuessed([...guessed, a]);\n          checkWin();\n        } else if (!guesses.includes(a)) {\n          setLives(lives - 1);\n          setGuessed([...guessed, a]);\n          checkWin();\n        }\n      },\n      children: a\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 32\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: guesses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: status !== \"Ongoing\" ? points : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Singleplayer, \"wvwo6+ys/IKZIz9FVDSzeL/uS4w=\");\n\n_c = Singleplayer;\nexport default Singleplayer; // General game logic to implement\n// 6 lives --> player gets more points if they with fewer incorrect guesses/more lives left\n// run a stopwatch --> the faster the time taken to win, the more points they get\n// max score from lives alone = 2400\n// add bonus points based on time taken\n// if take more than 1 min, no bonus points\n// time-based bonus points --> figure out the math for this\n// display no. of lives left\n// display letters used\n// only allow letters as guesses\n// update gallows & lives every time an incorrect guess is made\n// ensure user cannot continue playing when lives === 0 or if user wins\n// submit username & score to database upon completion of game\n// reveal word at end of game regardless of outcome\n\nvar _c;\n\n$RefreshReg$(_c, \"Singleplayer\");","map":{"version":3,"names":["React","useState","useEffect","Singleplayer","alphabets","word","setWord","correct","setCorrect","guessed","setGuessed","lives","setLives","message","setMessage","points","setPoints","status","setStatus","hiddenWord","toUpperCase","split","map","letter","includes","join","guesses","MAX_SCORE","checkWin","countPoints","endGame","alert","randomIntFromInterval","min","max","Math","floor","random","getWord","fetch","then","res","json","data","length","a","i"],"sources":["/Users/izzah/Documents/Programming/hangman_project/client/src/components/Singleplayer.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst Singleplayer = () => {  \n  const alphabets = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\",\n        \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\",\n        \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n\n  const [word, setWord] = useState(\"\")\n  const [correct, setCorrect] = useState([])\n  const [guessed, setGuessed] = useState([])\n  const [lives, setLives] = useState(6) // 6 lives\n  const [message, setMessage] = useState(lives + \"lives left\")\n  const [points, setPoints] = useState(0)\n  const [status, setStatus] = useState(\"Ongoing\")\n  const hiddenWord = word.toUpperCase().split(\"\").map(letter => correct.includes(letter) ? letter : \"_\").join(\" \")\n  let guesses = guessed.join(\" \")\n  const MAX_SCORE = 2400\n  \n  const checkWin = () => {\n    if (!hiddenWord.includes(\"_\") && lives > 0) {\n      setMessage(\"You win!\")\n      setStatus(\"W\")\n      countPoints()\n    } else if (hiddenWord.includes(\"_\") && lives <= 0) {\n      setMessage(\"You Lose!\")\n      setStatus(\"L\")\n      countPoints()\n    } else {\n      setMessage(lives + \" lives left\")\n      setStatus(\"Ongoing\")\n    }\n    return message\n  }\n  \n  const countPoints = () => {\n    if (status === \"W\" && lives > 0) {\n      setPoints((lives / 6) * MAX_SCORE)\n    }\n  }\n\n  const endGame = () => {\n    if (status === \"W\") {\n      alert(\"You win\") // replace with modal and submit score to database\n    } else if (status === \"L\") {\n      alert(\"You lose\") // replace with modal and submit score to database\n    }\n  }\n\n  const randomIntFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  const getWord = () => {\n    fetch(`https://www.wordgamedb.com/api/v1/words/?numLetters=${randomIntFromInterval(3, 7)}`)\n      .then(res => res.json())\n      .then(data => {\n        setWord(data[Math.floor(Math.random() * data.length)].word.toUpperCase())\n      })\n  }\n\n  useEffect(() => {\n    getWord()\n  }, [])\n\n  useEffect(() => {\n    checkWin()\n  })\n  \n  return(\n    <div>\n      <h1>Singleplayer</h1>\n      <h2>{hiddenWord}</h2>\n      {alphabets.map((a, i) => <button key={i} onClick={() => {\n        if (word.includes(a) && !guesses.includes(a)) {\n          setCorrect([...correct, a])\n          setGuessed([...guessed, a])\n          checkWin()\n        } else if (!guesses.includes(a)) {\n          setLives(lives - 1)\n          setGuessed([...guessed, a])\n          checkWin()\n        }\n      }}>{a}</button>)}\n      <h2>{guesses}</h2>\n      <h2>{message}</h2>\n      <h2>{status !== \"Ongoing\" ? points : null}</h2>\n    </div>\n  )\n}\n\nexport default Singleplayer\n\n// General game logic to implement\n// 6 lives --> player gets more points if they with fewer incorrect guesses/more lives left\n// run a stopwatch --> the faster the time taken to win, the more points they get\n// max score from lives alone = 2400\n// add bonus points based on time taken\n// if take more than 1 min, no bonus points\n// time-based bonus points --> figure out the math for this\n// display no. of lives left\n// display letters used\n// only allow letters as guesses\n// update gallows & lives every time an incorrect guess is made\n// ensure user cannot continue playing when lives === 0 or if user wins\n// submit username & score to database upon completion of game\n// reveal word at end of game regardless of outcome"],"mappings":"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"},"metadata":{},"sourceType":"module"}