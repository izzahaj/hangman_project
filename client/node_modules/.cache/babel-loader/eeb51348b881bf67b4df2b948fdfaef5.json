{"ast":null,"code":"var _jsxFileName = \"/Users/izzah/Documents/Programming/hangman_project/client/src/components/Singleplayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Modal from \"./Modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Singleplayer = () => {\n  _s();\n\n  const alphabets = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [word, setWord] = useState(\"\");\n  const [correct, setCorrect] = useState([]);\n  const [guessed, setGuessed] = useState([]);\n  const [lives, setLives] = useState(6); // 6 lives\n\n  const [points, setPoints] = useState(0);\n  const [status, setStatus] = useState(\"Ongoing\");\n  const hiddenWord = word.toUpperCase().split(\"\").map(letter => correct.includes(letter) ? letter : \"_\").join(\" \");\n  let guesses = guessed.join(\" \");\n  const MAX_SCORE = 2400;\n  const endMessage = status === \"W\" ? \"You won!\" : \"You lost!\";\n\n  const showModal = () => {\n    setIsOpenModal(true);\n  };\n\n  const hideModal = () => {\n    setIsOpenModal(false);\n  };\n\n  const checkWin = () => {\n    if (!hiddenWord.includes(\"_\") && lives > 0) {\n      setStatus(\"W\");\n      countPoints();\n      endGame();\n    } else if (hiddenWord.includes(\"_\") && lives === 0) {\n      setStatus(\"L\");\n      countPoints();\n      endGame();\n    }\n  };\n\n  const countPoints = () => {\n    if (status === \"W\" && lives > 0) {\n      setPoints(lives / 6 * MAX_SCORE);\n    }\n  };\n\n  const endGame = () => {\n    setIsOpenModal(true); // replace with modal and submit score to database\n  };\n\n  const randomIntFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const getWord = () => {\n    fetch(`https://www.wordgamedb.com/api/v1/words/?numLetters=${randomIntFromInterval(3, 7)}`).then(res => {\n      if (!res.ok) {\n        throw new Error(\"Could not fetch word data.\");\n      }\n\n      return res.json();\n    }).then(data => {\n      setWord(data[Math.floor(Math.random() * data.length)].word.toUpperCase());\n    }).then(() => console.log(\"Ok\")).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    getWord();\n    checkWin();\n  }, []);\n  useEffect(() => {\n    checkWin();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Singleplayer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: hiddenWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), alphabets.map((a, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        if (word.includes(a) && !guesses.includes(a)) {\n          setCorrect([...correct, a]);\n          setGuessed([...guessed, a]);\n          checkWin();\n        } else if (!guesses.includes(a)) {\n          setLives(lives - 1);\n          setGuessed([...guessed, a]);\n          checkWin();\n        }\n      },\n      children: a\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 32\n    }, this)), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: guesses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"You have \" + lives + \" lives left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: isOpenModal,\n      onClose: hideModal,\n      title: \"Title\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: endMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Score: \", points]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Singleplayer, \"C0WnFSyxdHKr5BuYtir+i2sWLRI=\");\n\n_c = Singleplayer;\nexport default Singleplayer; // General game logic to implement\n// 6 lives --> player gets more points if they with fewer incorrect guesses/more lives left\n// run a stopwatch --> the faster the time taken to win, the more points they get\n// max score from lives alone = 2400\n// add bonus points based on time taken\n// if take more than 1 min, no bonus points\n// time-based bonus points --> figure out the math for this\n// display no. of lives left\n// display letters used\n// only allow letters as guesses\n// update gallows & lives every time an incorrect guess is made\n// ensure user cannot continue playing when lives === 0 or if user wins\n// submit username & score to database upon completion of game\n// reveal word at end of game regardless of outcome\n\nvar _c;\n\n$RefreshReg$(_c, \"Singleplayer\");","map":{"version":3,"names":["React","useState","useEffect","Modal","Singleplayer","alphabets","isOpenModal","setIsOpenModal","word","setWord","correct","setCorrect","guessed","setGuessed","lives","setLives","points","setPoints","status","setStatus","hiddenWord","toUpperCase","split","map","letter","includes","join","guesses","MAX_SCORE","endMessage","showModal","hideModal","checkWin","countPoints","endGame","randomIntFromInterval","min","max","Math","floor","random","getWord","fetch","then","res","ok","Error","json","data","length","console","log","catch","err","a","i"],"sources":["/Users/izzah/Documents/Programming/hangman_project/client/src/components/Singleplayer.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Modal from \"./Modal\";\n\nconst Singleplayer = () => {  \n  const alphabets = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\",\n        \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\",\n        \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n\n  const [isOpenModal, setIsOpenModal] = useState(false) \n  const [word, setWord] = useState(\"\")\n  const [correct, setCorrect] = useState([])\n  const [guessed, setGuessed] = useState([])\n  const [lives, setLives] = useState(6) // 6 lives\n  const [points, setPoints] = useState(0)\n  const [status, setStatus] = useState(\"Ongoing\")\n  const hiddenWord = word.toUpperCase().split(\"\").map(letter => correct.includes(letter) ? letter : \"_\").join(\" \")\n  let guesses = guessed.join(\" \")\n  const MAX_SCORE = 2400\n  const endMessage = status === \"W\" ? \"You won!\" : \"You lost!\"\n\n  const showModal = () => {\n    setIsOpenModal(true)\n  }\n\n  const hideModal = () => {\n    setIsOpenModal(false)\n  }\n  \n  const checkWin = () => {\n    if (!hiddenWord.includes(\"_\") && lives > 0) {\n      setStatus(\"W\")\n      countPoints()\n      endGame()\n    } else if (hiddenWord.includes(\"_\") && lives === 0) {\n      setStatus(\"L\")\n      countPoints()\n      endGame()\n    }\n  }\n  \n  const countPoints = () => {\n    if (status === \"W\" && lives > 0) {\n      setPoints((lives / 6) * MAX_SCORE)\n    }\n  }\n\n  const endGame = () => {\n    setIsOpenModal(true) // replace with modal and submit score to database\n  }\n\n  const randomIntFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  const getWord = () => {\n    fetch(`https://www.wordgamedb.com/api/v1/words/?numLetters=${randomIntFromInterval(3, 7)}`)\n      .then(res => {\n        if (!res.ok) {\n          throw new Error(\"Could not fetch word data.\")\n        }\n        return res.json()\n      })\n      .then(data => {\n        setWord(data[Math.floor(Math.random() * data.length)].word.toUpperCase())\n      })\n      .then(() => console.log(\"Ok\"))\n      .catch(err => console.log(err))\n  }\n\n  useEffect(() => {\n    getWord()\n    checkWin()\n  }, [])\n\n  useEffect(() => {\n    checkWin()\n  })\n  \n  return(\n    <div>\n      <h1>Singleplayer</h1>\n      <h2>{hiddenWord}</h2>\n      {alphabets.map((a, i) => <button key={i} onClick={() => {\n        if (word.includes(a) && !guesses.includes(a)) {\n          setCorrect([...correct, a])\n          setGuessed([...guessed, a])\n          checkWin()\n        } else if (!guesses.includes(a)) {\n          setLives(lives - 1)\n          setGuessed([...guessed, a])\n          checkWin()\n        }\n      }}>{a}</button>)}\n      <h2>{guesses}</h2>\n      <h2>{\"You have \" + lives + \" lives left\"}</h2>\n      <Modal show={isOpenModal} onClose={hideModal} title=\"Title\">\n        <p>{endMessage}</p>\n        <p>Score: {points}</p>\n      </Modal>\n    </div>\n  )\n}\n\nexport default Singleplayer\n\n// General game logic to implement\n// 6 lives --> player gets more points if they with fewer incorrect guesses/more lives left\n// run a stopwatch --> the faster the time taken to win, the more points they get\n// max score from lives alone = 2400\n// add bonus points based on time taken\n// if take more than 1 min, no bonus points\n// time-based bonus points --> figure out the math for this\n// display no. of lives left\n// display letters used\n// only allow letters as guesses\n// update gallows & lives every time an incorrect guess is made\n// ensure user cannot continue playing when lives === 0 or if user wins\n// submit username & score to database upon completion of game\n// reveal word at end of game regardless of outcome"],"mappings":"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"},"metadata":{},"sourceType":"module"}