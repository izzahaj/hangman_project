[{"/Users/izzah/Documents/Programming/hangman_project/client/src/index.js":"1","/Users/izzah/Documents/Programming/hangman_project/client/src/App.js":"2","/Users/izzah/Documents/Programming/hangman_project/client/src/reportWebVitals.js":"3","/Users/izzah/Documents/Programming/hangman_project/client/src/components/Singleplayer.js":"4","/Users/izzah/Documents/Programming/hangman_project/client/src/components/Home.js":"5","/Users/izzah/Documents/Programming/hangman_project/client/src/components/Multiplayer.js":"6","/Users/izzah/Documents/Programming/hangman_project/client/src/components/Leaderboard.js":"7","/Users/izzah/Documents/Programming/hangman_project/client/src/components/Modal.js":"8"},{"size":535,"mtime":1652896579132,"results":"9","hashOfConfig":"10"},{"size":672,"mtime":1652899983749,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1652896579133,"results":"12","hashOfConfig":"10"},{"size":3806,"mtime":1652979096303,"results":"13","hashOfConfig":"10"},{"size":1123,"mtime":1652978201186,"results":"14","hashOfConfig":"10"},{"size":126,"mtime":1652899209620,"results":"15","hashOfConfig":"10"},{"size":126,"mtime":1652899976679,"results":"16","hashOfConfig":"10"},{"size":1365,"mtime":1652979035212,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"3rhgr2",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"21"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"21"},"/Users/izzah/Documents/Programming/hangman_project/client/src/index.js",[],[],[],"/Users/izzah/Documents/Programming/hangman_project/client/src/App.js",[],[],"/Users/izzah/Documents/Programming/hangman_project/client/src/reportWebVitals.js",[],[],"/Users/izzah/Documents/Programming/hangman_project/client/src/components/Singleplayer.js",["46","47","48","49"],[],"import React, { useState, useEffect } from \"react\";\nimport Modal from \"./Modal\";\n\nconst Singleplayer = () => {  \n  const alphabets = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\",\n        \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\",\n        \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n\n  const [isOpenModal, setIsOpenModal] = useState(false) \n  const [word, setWord] = useState(\"\")\n  const [correct, setCorrect] = useState([])\n  const [guessed, setGuessed] = useState([])\n  const [lives, setLives] = useState(6) // 6 lives\n  const [points, setPoints] = useState(0)\n  const [status, setStatus] = useState(\"Ongoing\")\n  const hiddenWord = word.toUpperCase().split(\"\").map(letter => correct.includes(letter) ? letter : \"_\").join(\" \")\n  let guesses = guessed.join(\" \")\n  const MAX_SCORE = 2400\n  const endMessage = status === \"W\" ? \"You won!\" : \"You lost!\"\n\n  const showModal = () => {\n    setIsOpenModal(true)\n  }\n\n  const hideModal = () => {\n    setIsOpenModal(false)\n  }\n  \n  const checkWin = () => {\n    if (!hiddenWord.includes(\"_\") && lives > 0) {\n      setStatus(\"W\")\n      endGame()\n    } else if (hiddenWord.includes(\"_\") && lives === 0) {\n      setStatus(\"L\")\n      endGame()\n    }\n  }\n  \n  const countPoints = () => {\n    if (status === \"W\" && lives > 0) {\n      return (lives / 6) * MAX_SCORE\n    } else {\n      return 0\n    }\n  }\n\n  const endGame = () => {\n    setIsOpenModal(true) // replace with modal and submit score to database\n  }\n\n  const randomIntFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  const getWord = () => {\n    fetch(`https://www.wordgamedb.com/api/v1/words/?numLetters=${randomIntFromInterval(3, 7)}`)\n      .then(res => {\n        if (!res.ok) {\n          throw new Error(\"Could not fetch word data.\")\n        }\n        return res.json()\n      })\n      .then(data => {\n        setWord(data[Math.floor(Math.random() * data.length)].word.toUpperCase())\n      })\n      .then(() => console.log(\"Ok\"))\n      .catch(err => console.log(err))\n  }\n\n  useEffect(() => {\n    getWord()\n  }, [])\n\n  useEffect(() => {\n    if ((lives >= 0 && lives < 6) && status === \"Ongoing\") {\n      checkWin()\n    }\n  })\n  \n  return(\n    <div className=\"container-1\">\n      <h1>Singleplayer</h1>\n      <h2>{hiddenWord}</h2>\n      <div className=\"flex-container\">\n        {alphabets.map((a, i) => <button className=\"letter-btn\" key={i} disabled={guessed.includes(a)} onClick={() => {\n          if (word.includes(a) && !guesses.includes(a)) {\n            setCorrect([...correct, a])\n            setGuessed([...guessed, a])\n            checkWin()\n          } else if (!guesses.includes(a)) {\n            setLives(lives - 1)\n            setGuessed([...guessed, a])\n            checkWin()\n          }\n        }}>{a}</button>)}\n      </div>\n      <h3>Letters used:</h3>\n      <h3>{guesses}</h3>\n      <h3>Lives left: {lives}</h3>\n      <Modal show={isOpenModal} onClose={hideModal} title={endMessage}>\n        <p>Score: {countPoints()}</p>\n        <p>The word is: {word}</p>\n      </Modal>\n    </div>\n  )\n}\n\nexport default Singleplayer\n\n// General game logic to implement\n// 6 lives --> player gets more points if they with fewer incorrect guesses/more lives left\n// run a stopwatch --> the faster the time taken to win, the more points they get\n// max score from lives alone = 2400\n// add bonus points based on time taken\n// if take more than 1 min, no bonus points\n// time-based bonus points --> figure out the math for this\n// display no. of lives left\n// display letters used\n// only allow letters as guesses\n// update gallows & lives every time an incorrect guess is made\n// ensure user cannot continue playing when lives === 0 or if user wins\n// submit username & score to database upon completion of game\n// reveal word at end of game regardless of outcome","/Users/izzah/Documents/Programming/hangman_project/client/src/components/Home.js",["50"],[],"import React, { useState } from 'react'\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n  // const [username, setUsername] = useState(\"\")\n  // const [score, setScore] = useState(0)\n \n  // set username when singleplayer option is selected\n  // alternatively: only submit username & score upon completion of game\n  // -> saves database space\n  // work on logic and correctness of code before dealing with css\n  // style reference tag as a button for the link using css\n  /* handle http GET request here */\n\n  return(\n    <div className='container-2'>\n      <h1 className='row'>Hangman</h1>\n        <div className='row'>\n          <Link to=\"/singleplayer\">\n            <button className=\"btn-home\">Singleplayer</button>\n          </Link>\n        </div>\n        <div className='row'>\n          <Link to=\"/multiplayer\">\n            <button className=\"btn-home\">Multiplayer</button>\n          </Link>\n        </div>\n        <div className='row'>\n          <Link to=\"/leaderboard\">\n            <button className=\"btn-home\">Leaderboard</button>\n          </Link>\n        </div>\n    </div>\n  )\n}\n\nexport default Home;","/Users/izzah/Documents/Programming/hangman_project/client/src/components/Multiplayer.js",[],[],"/Users/izzah/Documents/Programming/hangman_project/client/src/components/Leaderboard.js",[],[],"/Users/izzah/Documents/Programming/hangman_project/client/src/components/Modal.js",["51","52"],[],"import React, { useEffect } from \"react\";\nimport { CSSTransition } from \"react-transition-group\"\nimport { Link}  from \"react-router-dom\"\nimport styles from \"../stylesheets/styles.css\"\n\nconst Modal = (props) => {\n  const nodeRef = React.useRef(null)\n  const closeOnEscapeKeyDown = (e) => {\n    if ((e.charCode || e.keyCode) === 27) {\n      props.onClose()\n    }\n  }\n\n  const cleanup = () => {\n    document.body.removeEventListener('keydown', closeOnEscapeKeyDown)\n  }\n\n  useEffect(() => {\n    document.body.addEventListener('keydown', closeOnEscapeKeyDown)\n    return cleanup()\n  }, [])\n\n  return(\n    <>\n      <CSSTransition\n        nodeRef={nodeRef}\n        in={props.show}\n        unmountOnExit\n        timeout={{ enter: 0, exit: 300 }}\n      >\n        <div ref={nodeRef} className={`modal ${props.show ? 'show' : ''}`}>\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h4 className=\"modal-title\">{props.title}</h4>\n            </div>\n            <div className=\"modal-body\">{props.children}</div>\n            <div className=\"modal-footer\">\n              <Link to=\"/\"><button className=\"btn\">Play Again</button></Link>\n              <button className=\"btn\" onClick={props.onClose}>Submit Score</button>\n            </div>\n          </div>\n        </div>\n      </CSSTransition>\n    </>\n  )\n}\n\nexport default Modal",{"ruleId":"53","severity":1,"message":"54","line":14,"column":10,"nodeType":"55","messageId":"56","endLine":14,"endColumn":16},{"ruleId":"53","severity":1,"message":"57","line":14,"column":18,"nodeType":"55","messageId":"56","endLine":14,"endColumn":27},{"ruleId":"53","severity":1,"message":"58","line":21,"column":9,"nodeType":"55","messageId":"56","endLine":21,"endColumn":18},{"ruleId":"59","severity":1,"message":"60","line":72,"column":6,"nodeType":"61","endLine":72,"endColumn":8,"suggestions":"62"},{"ruleId":"53","severity":1,"message":"63","line":1,"column":17,"nodeType":"55","messageId":"56","endLine":1,"endColumn":25},{"ruleId":"53","severity":1,"message":"64","line":4,"column":8,"nodeType":"55","messageId":"56","endLine":4,"endColumn":14},{"ruleId":"59","severity":1,"message":"65","line":21,"column":6,"nodeType":"61","endLine":21,"endColumn":8,"suggestions":"66"},"no-unused-vars","'points' is assigned a value but never used.","Identifier","unusedVar","'setPoints' is assigned a value but never used.","'showModal' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getWord'. Either include it or remove the dependency array.","ArrayExpression",["67"],"'useState' is defined but never used.","'styles' is defined but never used.","React Hook useEffect has missing dependencies: 'cleanup' and 'closeOnEscapeKeyDown'. Either include them or remove the dependency array.",["68"],{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},"Update the dependencies array to be: [getWord]",{"range":"73","text":"74"},"Update the dependencies array to be: [cleanup, closeOnEscapeKeyDown]",{"range":"75","text":"76"},[2056,2058],"[getWord]",[582,584],"[cleanup, closeOnEscapeKeyDown]"]