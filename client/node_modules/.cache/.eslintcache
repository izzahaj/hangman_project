[{"/Users/izzah/Documents/Programming/hangman_project/client/src/index.js":"1","/Users/izzah/Documents/Programming/hangman_project/client/src/App.js":"2","/Users/izzah/Documents/Programming/hangman_project/client/src/reportWebVitals.js":"3","/Users/izzah/Documents/Programming/hangman_project/client/src/components/Singleplayer.js":"4","/Users/izzah/Documents/Programming/hangman_project/client/src/components/Home.js":"5","/Users/izzah/Documents/Programming/hangman_project/client/src/components/Multiplayer.js":"6","/Users/izzah/Documents/Programming/hangman_project/client/src/components/Leaderboard.js":"7"},{"size":535,"mtime":1652896579132,"results":"8","hashOfConfig":"9"},{"size":672,"mtime":1652899983749,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1652896579133,"results":"11","hashOfConfig":"9"},{"size":3327,"mtime":1652900027316,"results":"12","hashOfConfig":"9"},{"size":673,"mtime":1652899342116,"results":"13","hashOfConfig":"9"},{"size":126,"mtime":1652899209620,"results":"14","hashOfConfig":"9"},{"size":126,"mtime":1652899976679,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3rhgr2",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/izzah/Documents/Programming/hangman_project/client/src/index.js",[],[],"/Users/izzah/Documents/Programming/hangman_project/client/src/App.js",[],[],[],"/Users/izzah/Documents/Programming/hangman_project/client/src/reportWebVitals.js",[],[],"/Users/izzah/Documents/Programming/hangman_project/client/src/components/Singleplayer.js",["39","40"],[],"import React, { useState, useEffect } from \"react\";\n\nconst Singleplayer = () => {  \n  const alphabets = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\",\n        \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\",\n        \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n\n  const [word, setWord] = useState(\"\")\n  const [correct, setCorrect] = useState([])\n  const [guessed, setGuessed] = useState([])\n  const [lives, setLives] = useState(6) // 6 lives\n  const [message, setMessage] = useState(lives + \"lives left\")\n  const [points, setPoints] = useState(0)\n  const [status, setStatus] = useState(\"Ongoing\")\n  const hiddenWord = word.toUpperCase().split(\"\").map(letter => correct.includes(letter) ? letter : \"_\").join(\" \")\n  let guesses = guessed.join(\" \")\n  const MAX_SCORE = 2400\n  \n  const checkWin = () => {\n    if (!hiddenWord.includes(\"_\") && lives > 0) {\n      setMessage(\"You win!\")\n      setStatus(\"W\")\n      countPoints()\n    } else if (hiddenWord.includes(\"_\") && lives <= 0) {\n      setMessage(\"You Lose!\")\n      setStatus(\"L\")\n      countPoints()\n    } else {\n      setMessage(lives + \" lives left\")\n      setStatus(\"Ongoing\")\n    }\n    return message\n  }\n  \n  const countPoints = () => {\n    if (status === \"W\" && lives > 0) {\n      setPoints((lives / 6) * MAX_SCORE)\n    }\n  }\n\n  const endGame = () => {\n    if (status === \"W\") {\n      alert(\"You win\") // replace with modal and submit score to database\n    } else if (status === \"L\") {\n      alert(\"You lose\") // replace with modal and submit score to database\n    }\n  }\n\n  const randomIntFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  const getWord = () => {\n    fetch(`https://www.wordgamedb.com/api/v1/words/?numLetters=${randomIntFromInterval(3, 7)}`)\n      .then(res => res.json())\n      .then(data => {\n        setWord(data[Math.floor(Math.random() * data.length)].word.toUpperCase())\n      })\n  }\n\n  useEffect(() => {\n    getWord()\n  }, [])\n\n  useEffect(() => {\n    checkWin()\n  })\n  \n  return(\n    <div>\n      <h1>Singleplayer</h1>\n      <h2>{hiddenWord}</h2>\n      {alphabets.map((a, i) => <button key={i} onClick={() => {\n        if (word.includes(a) && !guesses.includes(a)) {\n          setCorrect([...correct, a])\n          setGuessed([...guessed, a])\n          checkWin()\n        } else if (!guesses.includes(a)) {\n          setLives(lives - 1)\n          setGuessed([...guessed, a])\n          checkWin()\n        }\n      }}>{a}</button>)}\n      <h2>{guesses}</h2>\n      <h2>{message}</h2>\n      <h2>{status !== \"Ongoing\" ? points : null}</h2>\n    </div>\n  )\n}\n\nexport default Singleplayer\n\n// General game logic to implement\n// 6 lives --> player gets more points if they with fewer incorrect guesses/more lives left\n// run a stopwatch --> the faster the time taken to win, the more points they get\n// max score from lives alone = 2400\n// add bonus points based on time taken\n// if take more than 1 min, no bonus points\n// time-based bonus points --> figure out the math for this\n// display no. of lives left\n// display letters used\n// only allow letters as guesses\n// update gallows & lives every time an incorrect guess is made\n// ensure user cannot continue playing when lives === 0 or if user wins\n// submit username & score to database upon completion of game\n// reveal word at end of game regardless of outcome","/Users/izzah/Documents/Programming/hangman_project/client/src/components/Home.js",["41"],[],"/Users/izzah/Documents/Programming/hangman_project/client/src/components/Multiplayer.js",[],[],"/Users/izzah/Documents/Programming/hangman_project/client/src/components/Leaderboard.js",[],[],{"ruleId":"42","severity":1,"message":"43","line":41,"column":9,"nodeType":"44","messageId":"45","endLine":41,"endColumn":16},{"ruleId":"46","severity":1,"message":"47","line":63,"column":6,"nodeType":"48","endLine":63,"endColumn":8,"suggestions":"49"},{"ruleId":"42","severity":1,"message":"50","line":1,"column":17,"nodeType":"44","messageId":"45","endLine":1,"endColumn":25},"no-unused-vars","'endGame' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getWord'. Either include it or remove the dependency array.","ArrayExpression",["51"],"'useState' is defined but never used.",{"desc":"52","fix":"53"},"Update the dependencies array to be: [getWord]",{"range":"54","text":"55"},[1943,1945],"[getWord]"]